@startuml Indie_Studio
!define DARKBLUE
!includeurl https://raw.githubusercontent.com/Drakemor/RedDress-PlantUML/master/style.puml
'Gestion de souris, manettes, clavier, fps, fichier (sauvegarde), parsing JSON, textures
'texte, drawShapes, models(2d, 3D), audio

namespace global {
    class Vector<T> {

        -T _x;
        -T _y;
    }

    class Vector3<T> {

        -T _x;
        -T _y;
        -T _z;
    }

    class Directory
    {
    }

    class File
    {

    }
}

namespace game {
    enum Tag_e {
        COLLECTABLE,
        DROPPABLE,
        BOMB,
        POWERUP,
        PLAYER,
        AI
    }

    namespace Scenes {
        class MainMenu {
    }
    }

    namespace Systems {
        class AI{}
    }

    namespace managers {
        class SceneManager{}
        class GameManager{}
        class GlobalManager{}
        class ExplosionManager{}
        class UserManager{}
    }

    namespace Objects {

        class AEffect{}
        class BombPass{}
        class BombUp{}
        class EffectFactory{}
        class FireUp{}
        class HealthUp{}
        class OneUp{}
        class SpeedUp{}
        class ExplosionAnimation{}
        class Gui{}
        class Map{}
        class Player{}
        class AExplosif
        {
        }

        class Droppable {}
        class Collectible {}
        class Bomb {}

        class Character {
        }


        class Player {
        }

        class Bot {

        }


        enum TileType {
            WALL,
            PATH,
        }
        class Tile {
        }

        class Map {
        }

        class Wall {
        }

        class Mine {}
        class HealthPack {}
    }

    class User
    {
    }
}

namespace gameEngine {

namespace Managers {

    class InputManager
    {
        template <typename E>
    }
    class SaveManager
    class TextureManager
    class WindowManager
    class ObjFileManager
    class ModelManager {}
    'Button args are taken from botttom to top
    class ButtonManager {
    }
}

namespace Encapsulation {
    enum ButtonState {
        NORMAL,
        HOVER,
        PRESSED,
    }
    class Button {
    }

    class ADrawable
    {
    }

    class Image
    {
    }

    class Model {
    }

    class Camera2d {

    }

    class Camera {
    }

    class Shader {}

    class IAudioObject {


    }

    class Music {
    }

    class Audio {
    }

    class Sound {
    }

    class Color {
        -unsigned char _r;
        -unsigned char _g;
        -unsigned char _b;
        -unsigned char _a;
    }

    class Font {
    }

    class Rectangle {
    }

    class ModelAnimation {
    }

    class Gamepad
    {
    }

    class Keyboard
    {
    }

}

namespace interfaces {

    interface IScene
    {
    }

    interface IDrawable {
    }

    interface IWindowManager
    {
    }

    interface IDrawManager
    {
    }

    interface ITextureManager
    {
        'Potentiellement ajout
    }

    interface IAudioManager
    {
        'Classe audio avec playlist
    }

    abstract class AFileManager implements IFileManager {}

    'Classe qui pourrait herite de IFileManager -> JsonManager, XMLManager, OBJFileManager, ConfigManager, SaveManager
    interface IFileManager
    {
    }

    interface IInput
    {
    }
    'Voir pour les collisions si interface necessaires
}

namespace Systems {
    class Collision {
    }
    class Animate {
    }

}

namespace Component {

    class Collider {
    }
    class BoxCollider extends Collider {
    }

    class SphereCollider extends Collider {
    }

    class Transform {
    }
}

namespace Objects {
    enum Quadrants {
        TOP-LEFT
        TOP-RIGHT
        BOT-LEFT
        BOT-RIGHT
    }
    class AGameObject {
    }

    class Moveable extends AGameObject {
    }
}

gameEngine.Component.Transform--gameEngine.Objects.AGameObject
gameEngine.Component.Collider--gameEngine.Objects.AGameObject
gameEngine.Objects.Quadrants--gameEngine.Objects.AGameObject
gameEngine.Encapsulation.ModelAnimation--gameEngine.Systems.Animate

' ! Implements'
'1 implémente l'interface 2'

game.Scenes.MainMenu-->gameEngine.interfaces.IScene
gameEngine.Managers.TextureManager-->gameEngine.interfaces.ITextureManager
gameEngine.Managers.WindowManager-->gameEngine.interfaces.IWindowManager
gameEngine.Managers.SaveManager-->gameEngine.Managers.AFileManager
gameEngine.Managers.ObjFileManager-->gameEngine.Managers.AFileManager
gameEngine.Encapsulation.Gamepad-->gameEngine.interfaces.IInput
gameEngine.Encapsulation.Keyboard-->gameEngine.interfaces.IInput

'1 hérite de 2'
game.Objects.Bomb-->game.Objects.AExplosif
game.Objects.AExplosif-->game.Objects.Tile
game.Objects.Bot-->game.Objects.IA
game.Objects.Bot-->game.Objects.Character
game.Objects.Player-->game.Objects.Character
game.Objects.Mine-->game.Objects.Droppable
game.Objects.Bomb-->game.Objects.Droppable
game.Objects.Droppable-->gameEngine.Objects.AGameObject
game.Objects.Collectible-->gameEngine.Objects.AGameObject
game.Objects.Character-->gameEngine.Objects.Moveable
game.Objects.Tile-->gameEngine.Objects.AGameObject
game.Objects.Wall-->gameEngine.Objects.AGameObject
game.Objects.Mine-->gameEngine.Objects.Droppable
game.Objects.HealthPack-->game.Objects.Collectible
game.Objects.BombPass->game.Objects.AEffect
game.Objects.BombUp->game.Objects.AEffect
game.Objects.EffectFactory->game.Objects.AEffect
game.Objects.FireUp->game.Objects.AEffect
game.Objects.HealthUp->game.Objects.AEffect
game.Objects.OneUp->game.Objects.AEffect
game.Objects.SpeedUp->game.Objects.AEffect
game.Objects.AEffect-->game.Objects.Tile
gameEngine.Component.BoxCollider-->gameEngine.Component.Collider
gameEngine.Component.SphereCollider-->gameEngine.Component.Collider
gameEngine.Objects.AGameObject-->gameEngine.Systems.Collision
gameEngine.Objects.Moveable-->gameEngine.Systems.AGameObject
gameEngine.Encapsulation.ModelAnimation--gameEngine.Systems.Animate
gameEngine.Objects.AGameObject-->gameEngine.Systems.Collision

}
@enduml
